spring:
  application:
    name: xlweb-mico-order-server

  profiles:
    active: dev

  main:
    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。
    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Feign 等会存在重复定义的服务

  config:
    import:
      - optional:classpath:application-${spring.profiles.active}.yaml # 加载【本地】配置
      - optional:nacos:application-${spring.profiles.active}.yaml # 加载【Nacos】的配置
      - optional:nacos:${spring.application.name}-${spring.profiles.active}.yaml # 加载【Nacos】的配置

  # Servlet 配置
  servlet:
    # 文件上传相关配置项
    multipart:
      max-file-size: 50MB #设置单个文件大小
      max-request-size: 50MB #设置单次请求文件的总大小

  # Jackson 配置项
  jackson:
    locale: zh_CN
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
    serialization:
      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳
      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401
      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳
      fail-on-empty-beans: false # 允许序列化无属性的 Bean

  # Cache 配置项
  cache:
    type: REDIS
    redis:
      time-to-live: 1h # 设置过期时间为 1 小时

--- #################### 接口文档配置 ####################

springdoc:
  api-docs:
    enabled: true # 1. 是否开启 Swagger 接文档的元数据
    path: /v3/api-docs
  swagger-ui:
    enabled: true # 2.1 是否开启 Swagger 文档的官方 UI 界面
    path: /swagger-ui
  default-flat-param-object: true # 参见 https://doc.xiaominfo.com/docs/faq/v4/knife4j-parameterobject-flat-param 文档

knife4j:
  enable: true # 2.2 是否开启 Swagger 文档的 Knife4j UI 界面
  setting:
    language: zh_cn

# MyBatis Plus 的配置项
mybatis-plus:
  mapper-locations: classpath*:mapper/*/*Mapper.xml #xml扫描，多个目录用逗号或者分号分隔（告诉 Mapper 所对应的 XML 文件位置）
  type-aliases-package: ${xlweb.info.base-package-dal}
  configuration:
    # 配置slq打印日志
    # log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。
  global-config:
    db-config:
      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。
      #      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库
      #      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库
      #      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)
    banner: false # 关闭控制台的 Banner 打印
  encryptor:
    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成

mybatis-plus-join:
  banner: false # 关闭控制台的 Banner 打印

# Spring Data Redis 配置
spring:
  data:
    redis:
      repositories:
        enabled: false # 项目未使用到 Spring Data Redis 的 Repository，所以直接禁用，保证启动速度

# VO 转换（数据翻译）相关
easy-trans:
  is-enable-global: true # 启用全局翻译（拦截所有 SpringMVC ResponseBody 进行自动翻译 )。如果对于性能要求很高可关闭此配置，或通过 @IgnoreTrans 忽略某个接口

--- #################### RPC 远程调用相关配置 ####################

--- #################### 消息队列相关 ####################

# rocketmq 配置项，对应 RocketMQProperties 配置类
#rocketmq:
#  # Producer 配置项
#  producer:
#    group: ${spring.application.name}_PRODUCER # 生产者分组

#spring:
#  # Kafka 配置项，对应 KafkaProperties 配置类
#  kafka:
#    # Kafka Producer 配置项
#    producer:
#      acks: 1 # 0-不应答。1-leader 应答。all-所有 leader 和 follower 应答。
#      retries: 3 # 发送失败时，重试发送的次数
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer # 消息的 value 的序列化
#    # Kafka Consumer 配置项
#    consumer:
#      auto-offset-reset: earliest # 设置消费者分组最初的消费进度为 earliest 。可参考博客 https://blog.csdn.net/lishuangzhe7047/article/details/74530417 理解
#      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#      properties:
#        spring.json.trusted.packages: '*'
#    # Kafka Consumer Listener 监听器配置
#    listener:
#      missing-topics-fatal: false # 消费监听接口监听的主题不存在时，默认会报错。所以通过设置为 false ，解决报错

--- #################### 定时任务相关配置 ####################

xxl:
  job:
    executor:
      appname: ${spring.application.name} # 执行器 AppName
      logpath: logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径
    accessToken: default_token # 执行器通讯TOKEN

--- #################### NBUG相关配置 ####################

xlweb:
  version: XLWEB-JAVA-KY-v1.3.4 # 当前代码版本
  wechat-api-url:  #请求微信接口中专服务器
  wechat-js-api-debug: false #微信js api系列是否开启调试模式
  wechat-js-api-beta: true #微信js api是否是beta版本
  asyncConfig: true #是否同步config表数据到redis
  asyncWeChatProgramTempList: false #是否同步小程序公共模板库
  imagePath: E://sean//nbug//xlweb//mico//xlweb-micoservice//xlweb-mico-module//xlweb-mico-infra//xlwebimage// # 服务器图片路径配置 斜杠结尾
  feignLoggerLevel: NONE  # openFeign日志级别
  info:
    version: 1.0.0
    base-package: com.nbug.module.order
    base-package-dal: com.nbug.module.order.dal
  web:
    admin-ui:
      url: http://nbug.top # Admin 管理后台 UI 的地址
  xss:
    enable: false
    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系
      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求
      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求
  security:
    permit-all_urls:
      - /api/front/** #front 全部接口放开
  websocket:
    enable: true # websocket的开关
    path: /order/ws # 路径
    sender-type: local # 消息发送的类型，可选值为 local、redis、rocketmq、kafka、rabbitmq
#    sender-rocketmq:
#      topic: ${spring.application.name}-websocket # 消息发送的 RocketMQ Topic
#      consumer-group: ${spring.application.name}-websocket-consumer # 消息发送的 RocketMQ Consumer Group
    sender-rabbitmq:
      exchange: ${spring.application.name}-websocket-exchange # 消息发送的 RabbitMQ Exchange
      queue: ${spring.application.name}-websocket-queue # 消息发送的 RabbitMQ Queue
#    sender-kafka:
#      topic: ${spring.application.name}-websocket # 消息发送的 Kafka Topic
#      consumer-group: ${spring.application.name}-websocket-consumer # 消息发送的 Kafka Consumer Group

  swagger:
    title: 管理后台
    description: 提供管理员管理的所有功能
    version: ${xlweb.info.version}
#  codegen:
#    base-package: com.nbug.module.order
#    db-schemas: ${spring.datasource.dynamic.datasource.master.name}
#    front-type: 20 # 前端模版的类型，参见 CodegenFrontTypeEnum 枚举类
#    unit-test-enable: false # 是否生成单元测试
  tenant: # 多租户相关配置项
    enable: false
    ignore-urls:
      - /api/admin/infra/validate/code/get # 获取验证码，和租户无关
      - /api/admin/system/login/getLoginPic # 获取登录页LOGO，和租户无关
      - /api/admin/infra/jsconfig/getxlwebchatconfig  # 客服统计，和租户无关
      - /api/admin/system/login/account #PC 账号密码登录
      - /api/front/api/front/user/login/account # H5 账号密码登录
      - /api/front/api/front/user/login/mobile  # H5 手机号登录
      - /api/front/api/front/user/login/sendCode # H5 发送验证码
      - /api/front/api/front/user/login/logout # H5 退出
      - /api/front/infra/wechat/authorize/login # 微信登录公共号授权登录
      - /api/front/infra/wechat/authorize/program/login # 微信登录小程序授权登录
      - /api/front/infra/wechat/config # 获取微信公众号js配置
      - /api/front/infra/wechat/getLogo # 小程序获取授权logo
      - /api/front/infra/wechat/register/binding/phone # 微信注册绑定手机号
    ignore-tables:
      - infra_config

debug: false
logging:
  level:
    io.swagger.*: error
    com.nbug.*: error
    org.springframework.boot.autoconfigure: ERROR
    com.baomidou.mybatisplus: error
  config: classpath:logback-spring.xml
  file:
    name: logs/${spring.application.name}.log # 日志文件名，全路径

seata:
  enabled: true
  enable-auto-data-source-proxy: true
  application-id: ${spring.application.name}
  tx-service-group: my_test_tx_group
  service:
    vgroup-mapping:
      my_test_tx_group: default
    disable-global-transaction: false
  client:
    rm:
      # 是否上报成功状态
      report-success-enable: true
      # 重试次数
      report-retry-count: 5
  registry:
    type: nacos  #使用nacos作为注册中心
    nacos:
      cluster: default
      namespace: 6ace76b7-6dd7-4d4b-b75d-737aca2e24a7
      server-addr: 127.0.0.1:8848  # nacos #注册中心IP:端口
      application: seata-server # Seata服务名（应与seata-server实际注册的服务名一致）
      group: SEATA_GROUP        # Seata分组名（应与seata-server实际注册的分组名一致）
      username: nacos
      password: nacos


  config:
    type: nacos
    nacos:
      serverAddr: 127.0.0.1:8848
      namespace: 6ace76b7-6dd7-4d4b-b75d-737aca2e24a7
      group: SEATA_GROUP
      username: nacos
      password: nacos
      dataId: seataServer.properties