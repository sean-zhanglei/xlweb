server:
  port: 48080

--- #################### 注册中心 + 配置中心相关配置 ####################

spring:
  cloud:
    nacos:
      server-addr: 127.0.0.1:8848 # Nacos 服务器地址
      username: nacos # Nacos 账号
      password: nacos # Nacos 密码
      discovery: # 【配置中心】配置项
        namespace: 6ace76b7-6dd7-4d4b-b75d-737aca2e24a7 # 命名空间。这里使用 dev 开发环境
        group: DEFAULT_GROUP # 使用的 Nacos 配置分组，默认为 DEFAULT_GROUP
        metadata:
          version: 1.0.0 # 服务实例的版本号，可用于灰度发布
      config: # 【注册中心】配置项
        namespace: 6ace76b7-6dd7-4d4b-b75d-737aca2e24a7 # 命名空间。这里使用 dev 开发环境
        group: DEFAULT_GROUP # 使用的 Nacos 配置分组，默认为 DEFAULT_GROUP

--- #################### 数据库相关配置 ####################
spring:
  # 数据源配置项
  autoconfigure:
    exclude:
      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源
      - org.apache.seata.spring.boot.autoconfigure.SeataCoreAutoConfiguration # 排除 Seata 的自动配置 使用自定义的 Seata 配置保证flyway优先启动
  datasource:
    druid: # Druid 【监控】相关的全局配置
      web-stat-filter:
        enabled: true
      stat-view-servlet:
        enabled: true
        allow: # 设置白名单，不填则允许所有访问
        url-pattern: /druid/*
        login-username: # 控制台管理用户名和密码
        login-password:
      filter:
        stat:
          enabled: true
          log-slow-sql: true # 慢 SQL 记录
          slow-sql-millis: 100
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true
    dynamic: # 多数据源配置
      druid: # Druid 【连接池】相关的全局配置
        initial-size: 5 # 初始连接数
        min-idle: 10 # 最小连接池数量
        max-active: 20 # 最大连接池数量
        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒
        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒
        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒
        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒
        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效
        test-while-idle: true
        test-on-borrow: false
        test-on-return: false
      primary: master
      datasource:
        master:
          url: jdbc:mysql://127.0.0.1:3306/xlweb_mico_system?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&nullCatalogMeansCurrent=true&rewriteBatchedStatements=true # MySQL Connector/J 8.X 连接的示例
          username: root
          password: MysqlPassword
        slave: # 模拟从库，可根据自己需要修改 # 模拟从库，可根据自己需要修改
          lazy: true # 开启懒加载，保证启动速度
          url: jdbc:mysql://127.0.0.1:3306/xlweb_mico_system?useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true&nullCatalogMeansCurrent=true&rewriteBatchedStatements=true # MySQL Connector/J 8.X 连接的示例
          username: root
          password: MysqlPassword

  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优
  redis:
    host: 127.0.0.1 # 地址
    port: 6379 # 端口
    database: 14 # 数据库索引
    password: 123456 # 密码，建议生产环境开启

--- #################### MQ 消息队列相关配置 ####################

# rocketmq 配置项，对应 RocketMQProperties 配置类
#rocketmq:
#  name-server: 127.0.0.1:9876 # RocketMQ Namesrv

spring:
  # RabbitMQ 配置项，对应 RabbitProperties 配置类
  rabbitmq:
    host: 127.0.0.1 # RabbitMQ 服务的地址
    port: 5672 # RabbitMQ 服务的端口
    username: guest # RabbitMQ 服务的账号
    password: guest # RabbitMQ 服务的密码
  # Kafka 配置项，对应 KafkaProperties 配置类
#  kafka:
#    bootstrap-servers: 127.0.0.1:9092 # 指定 Kafka Broker 地址，可以设置多个，以逗号分隔

--- #################### 定时任务相关配置 ####################
xxl:
  job:
    enabled: false  # 没有定时任务 关闭加快启动速度
    admin:
      addresses: http://127.0.0.1:8080/xxl-job-admin # 调度中心部署跟地址

--- #################### 服务保障相关配置 ####################

# Lock4j 配置项
lock4j:
  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒
  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒

--- #################### 监控相关配置 ####################

# Actuator 监控端点的配置项
management:
  endpoints:
    web:
      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator
      exposure:
        include: '*' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。

# Spring Boot Admin 配置项
#spring:
#  boot:
#    admin:
#      # Spring Boot Admin Client 客户端的相关配置
#      client:
#        instance:
#          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]
#      # Spring Boot Admin Server 服务端的相关配置
#      context-path: /admin # 配置 Spring

--- #################### RPC 远程调用相关配置 ####################

--- #################### 消息队列相关 ####################

# rocketmq 配置项，对应 RocketMQProperties 配置类
#rocketmq:
#  # Producer 配置项
#  producer:
#    group: ${spring.application.name}_PRODUCER # 生产者分组

#spring:
#  # Kafka 配置项，对应 KafkaProperties 配置类
#  kafka:
#    # Kafka Producer 配置项
#    producer:
#      acks: 1 # 0-不应答。1-leader 应答。all-所有 leader 和 follower 应答。
#      retries: 3 # 发送失败时，重试发送的次数
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer # 消息的 value 的序列化
#    # Kafka Consumer 配置项
#    consumer:
#      auto-offset-reset: earliest # 设置消费者分组最初的消费进度为 earliest 。可参考博客 https://blog.csdn.net/lishuangzhe7047/article/details/74530417 理解
#      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#      properties:
#        spring.json.trusted.packages: '*'
#    # Kafka Consumer Listener 监听器配置
#    listener:
#      missing-topics-fatal: false # 消费监听接口监听的主题不存在时，默认会报错。所以通过设置为 false ，解决报错

--- #################### NBUG相关配置 ####################

xlweb:
  demo: false # 开启演示模式
  version: XLWEB-JAVA-KY-v1.3.4 # 当前代码版本
  wechat-api-url:  #请求微信接口中专服务器
  wechat-js-api-debug: false #微信js api系列是否开启调试模式
  wechat-js-api-beta: true #微信js api是否是beta版本
  asyncConfig: true #是否同步config表数据到redis
  asyncWeChatProgramTempList: false #是否同步小程序公共模板库
  imagePath: E://sean//nbug//xlweb//mico//xlweb-micoservice//xlweb-mico-module//xlweb-mico-infra//xlwebimage// # 服务器图片路径配置 斜杠结尾
  feignLoggerLevel: NONE  # openFeign日志级别
  info:
    version: 1.0.0
    base-package: com.nbug.module.system
    base-package-dal: com.nbug.module.system.dal
  web:
    admin-ui:
      url: http://nbug.top # Admin 管理后台 UI 的地址
  xss:
    enable: false
    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系
      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求
      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求
  security:
    permit-all_urls:
      - /api/admin/system/login/getLoginPic # 获取登录页图片
      - /api/admin/system/login/account # PC 账号登录
      - /api/admin/system/login/logout # PC登出
      - /api/admin/system/codegen/code # codegen
      - /api/front/** #front 全部接口放开

  websocket:
    enable: true # websocket的开关
    path: /system/ws # 路径
    sender-type: local # 消息发送的类型，可选值为 local、redis、rocketmq、kafka、rabbitmq
    #    sender-rocketmq:
    #      topic: ${spring.application.name}-websocket # 消息发送的 RocketMQ Topic
    #      consumer-group: ${spring.application.name}-websocket-consumer # 消息发送的 RocketMQ Consumer Group
    sender-rabbitmq:
      exchange: ${spring.application.name}-websocket-exchange # 消息发送的 RabbitMQ Exchange
      queue: ${spring.application.name}-websocket-queue # 消息发送的 RabbitMQ Queue
  #    sender-kafka:
  #      topic: ${spring.application.name}-websocket # 消息发送的 Kafka Topic
  #      consumer-group: ${spring.application.name}-websocket-consumer # 消息发送的 Kafka Consumer Group

  swagger:
    title: 管理后台
    description: 提供管理员管理的所有功能
    version: ${xlweb.info.version}
  #  codegen:
  #    base-package: com.nbug.module.infra
  #    db-schemas: ${spring.datasource.dynamic.datasource.master.name}
  #    front-type: 20 # 前端模版的类型，参见 CodegenFrontTypeEnum 枚举类
  #    unit-test-enable: false # 是否生成单元测试
  tenant: # 多租户相关配置项
    enable: false
    ignore-urls:
      - /api/admin/infra/validate/code/get # 获取验证码，和租户无关
      - /api/admin/system/login/getLoginPic # 获取登录页LOGO，和租户无关
      - /api/admin/infra/jsconfig/getxlwebchatconfig  # 客服统计，和租户无关
      - /api/admin/system/login/account #PC 账号密码登录
      - /api/front/api/front/user/login/account # H5 账号密码登录
      - /api/front/api/front/user/login/mobile  # H5 手机号登录
      - /api/front/api/front/user/login/sendCode # H5 发送验证码
      - /api/front/api/front/user/login/logout # H5 退出
      - /api/front/infra/wechat/authorize/login # 微信登录公共号授权登录
      - /api/front/infra/wechat/authorize/program/login # 微信登录小程序授权登录
      - /api/front/infra/wechat/config # 获取微信公众号js配置
      - /api/front/infra/wechat/getLogo # 小程序获取授权logo
      - /api/front/infra/wechat/register/binding/phone # 微信注册绑定手机号
    ignore-tables:
      - infra_config

--- #################### SEATA相关配置 ####################

seata:
  enabled: true
  enable-auto-data-source-proxy: true
  application-id: ${spring.application.name}
  tx-service-group: my_test_tx_group
  service:
    vgroup-mapping:
      my_test_tx_group: default
    disable-global-transaction: false
  client:
    rm:
      # 是否上报成功状态
      report-success-enable: true
      # 重试次数
      report-retry-count: 5
  registry:
    type: nacos  #使用nacos作为注册中心
    nacos:
      cluster: default
      namespace: 6ace76b7-6dd7-4d4b-b75d-737aca2e24a7
      server-addr: 127.0.0.1:8848  # nacos #注册中心IP:端口
      application: seata-server # Seata服务名（应与seata-server实际注册的服务名一致）
      group: SEATA_GROUP        # Seata分组名（应与seata-server实际注册的分组名一致）
      username: nacos
      password: nacos

  config:
    type: nacos
    nacos:
      serverAddr: 127.0.0.1:8848
      namespace: 6ace76b7-6dd7-4d4b-b75d-737aca2e24a7
      group: SEATA_GROUP
      username: nacos
      password: nacos
      dataId: seataServer.properties

--- #################### DEBUG相关配置 ####################
debug: true
logging:
  level:
    io.swagger.*: error
    com.nbug.*: debug
    org.springframework.boot.autoconfigure: ERROR
    com.baomidou.mybatisplus: error
  config: classpath:logback-spring.xml
  file:
    name: logs/${spring.application.name}.log # 日志文件名，全路径
